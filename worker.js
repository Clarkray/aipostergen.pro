/**
 * AI Poster Generator Worker
 * 处理海报生成请求并返回HTML和CSS
 */

export default {
  async fetch(request, env, ctx) {
    // 设置CORS头，允许跨域请求
    const corsHeaders = {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'POST, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type, Authorization',
    };

    // 处理预检请求
    if (request.method === 'OPTIONS') {
      return new Response(null, {
        headers: corsHeaders
      });
    }

    // 只处理POST请求
    if (request.method !== 'POST') {
      return new Response('Method Not Allowed', {
        status: 405,
        headers: corsHeaders
      });
    }

    try {
      // 解析请求体
      const requestData = await request.json();
      const { topic, style, posterRatio, additionalInfo } = requestData;

      // 验证必要参数
      if (!topic || !style || !posterRatio) {
        return new Response(JSON.stringify({
          error: '缺少必要参数'
        }), {
          status: 400,
          headers: {
            'Content-Type': 'application/json',
            ...corsHeaders
          }
        });
      }

      // 调用Deepseek API生成海报代码
      const generatedCode = await generatePosterCode(topic, style, posterRatio, additionalInfo);

      // 返回生成的代码
      return new Response(JSON.stringify(generatedCode), {
        headers: {
          'Content-Type': 'application/json',
          ...corsHeaders
        }
      });
    } catch (error) {
      console.error('处理请求时出错:', error);
      
      // 返回错误响应
      return new Response(JSON.stringify({
        error: '生成海报时出错',
        message: error.message
      }), {
        status: 500,
        headers: {
          'Content-Type': 'application/json',
          ...corsHeaders
        }
      });
    }
  },
};

/**
 * 调用Deepseek API生成海报代码
 */
async function generatePosterCode(topic, style, posterRatio, additionalInfo) {
  // API密钥存放在Worker内部，不会暴露给客户端
  const DEEPSEEK_API_KEY = 'sk-5caad4ac968449598680cbd1c1fa7f93';
  const DEEPSEEK_API_URL = 'https://api.deepseek.com/v1/chat/completions';
  
  const ratioText = posterRatio === 'horizontal' ? '横向(适合PC展示)' : '竖向(适合手机展示)';
  
  const prompt = `
    请为我生成一个关于"${topic}"的海报HTML和CSS代码。
    设计风格要求：${style}
    海报比例：${ratioText}
    额外要求：${additionalInfo || '无'}
    
    请提供完整的HTML和CSS代码，确保代码可以直接运行并呈现出精美的海报效果。
    返回格式应为JSON，包含两个字段：html和css。
  `;
  
  try {
    const response = await fetch(DEEPSEEK_API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${DEEPSEEK_API_KEY}`
      },
      body: JSON.stringify({
        model: "deepseek-coder",
        messages: [
          {
            role: "user",
            content: prompt
          }
        ],
        temperature: 0.7,
        max_tokens: 4000
      })
    });
    
    if (!response.ok) {
      throw new Error(`API请求失败: ${response.status}`);
    }
    
    const data = await response.json();
    
    // 解析API返回的内容
    try {
      // 假设API返回的是包含代码的JSON字符串
      const content = data.choices[0].message.content;
      // 提取JSON部分
      const jsonMatch = content.match(/```json\n([\s\S]*?)\n```/) || 
                       content.match(/{[\s\S]*}/);
      
      if (jsonMatch) {
        return JSON.parse(jsonMatch[1] || jsonMatch[0]);
      } else {
        // 如果无法解析为JSON，尝试直接从文本中提取HTML和CSS
        const htmlMatch = content.match(/```html\n([\s\S]*?)\n```/);
        const cssMatch = content.match(/```css\n([\s\S]*?)\n```/);
        
        return {
          html: htmlMatch ? htmlMatch[1] : '',
          css: cssMatch ? cssMatch[1] : ''
        };
      }
    } catch (error) {
      console.error('解析API响应时出错:', error);
      throw new Error('无法解析API响应');
    }
  } catch (error) {
    console.error('API请求出错:', error);
    // 如果API请求失败，返回模拟数据
    // return getMockData(topic, style, posterRatio);
  }
}

/**
 * 生成模拟数据（当API请求失败时使用）
 */
function getMockData(topic, style, posterRatio) {
  const isHorizontal = posterRatio === 'horizontal';
  
  return {
    html: `
<div class="poster ${posterRatio}">
  <div class="poster-header">
    <h1>${topic}</h1>
  </div>
  
  <div class="poster-content">
    <div class="poster-image">
      <div class="placeholder-image"></div>
    </div>
    
    <div class="poster-text">
      <h2>${topic} Poster</h2>
      <p>Beautiful poster designed in ${style} style</p>
      <div class="poster-details">
        <div class="detail">
          <span class="detail-label">Design Style</span>
          <span class="detail-value">${style}</span>
        </div>
        <div class="detail">
          <span class="detail-label">Created Date</span>
          <span class="detail-value">${new Date().toLocaleDateString()}</span>
        </div>
        <div class="detail">
          <span class="detail-label">Generated By</span>
          <span class="detail-value">Deepseek AI</span>
        </div>
      </div>
    </div>
  </div>
  
  <div class="poster-footer">
    <p>AI Poster Generator &copy; 2023</p>
  </div>
</div>
    `,
    css: `
body {
  margin: 0;
  padding: 0;
  background-color: #f5f5f5;
  font-family: 'Arial', sans-serif;
}

.poster {
  width: ${isHorizontal ? '1200px' : '800px'};
  height: ${isHorizontal ? '800px' : '1200px'};
  margin: 0 auto;
  background-color: white;
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
  overflow: hidden;
  display: flex;
  flex-direction: column;
}

.poster-header {
  background-color: #2c3e50;
  color: white;
  padding: 2rem;
  text-align: center;
}

.poster-header h1 {
  margin: 0;
  font-size: 3rem;
  letter-spacing: 2px;
  text-transform: uppercase;
}

.poster-content {
  flex: 1;
  display: flex;
  flex-direction: column;
  padding: 2rem;
}

.poster-image {
  flex: ${isHorizontal ? '1' : '2'};
  margin-${isHorizontal ? 'right' : 'bottom'}: 2rem;
}

.placeholder-image {
  width: 100%;
  height: 100%;
  background: linear-gradient(45deg, #3498db, #9b59b6);
  border-radius: 8px;
  display: flex;
  justify-content: center;
  align-items: center;
  color: white;
  font-size: 1.5rem;
  position: relative;
  overflow: hidden;
}

.placeholder-image::after {
  content: '${topic}';
  position: absolute;
  font-size: 3rem;
  opacity: 0.3;
  text-transform: uppercase;
}

.poster-text {
  flex: 1;
  padding: 2rem;
  background-color: #f9f9f9;
  border-radius: 8px;
}

.poster-text h2 {
  margin-top: 0;
  color: #2c3e50;
  font-size: 2.5rem;
}

.poster-text p {
  color: #7f8c8d;
  font-size: 1.2rem;
  margin-bottom: 2rem;
}

.poster-details {
  display: flex;
  flex-wrap: wrap;
  gap: 1rem;
}

.detail {
  flex: 1;
  min-width: 200px;
  padding: 1rem;
  background-color: white;
  border-radius: 4px;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
}

.detail-label {
  display: block;
  font-size: 0.9rem;
  color: #7f8c8d;
  margin-bottom: 0.5rem;
}

.detail-value {
  display: block;
  font-size: 1.1rem;
  font-weight: bold;
  color: #2c3e50;
}

.poster-footer {
  background-color: #2c3e50;
  color: white;
  padding: 1rem;
  text-align: center;
  font-size: 0.9rem;
}

@media (max-width: 768px) {
  .poster {
    width: 100%;
    height: auto;
    min-height: ${isHorizontal ? '600px' : '800px'};
  }
  
  .poster-content {
    flex-direction: column;
  }
}
    `
  };
}